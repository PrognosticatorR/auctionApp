{
  "contractName": "Deed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "DeedRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "registerDeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "addDeedMetadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.4+commit.1dca32f3\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"DeedRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addDeedMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"registerDeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addDeedMetadata(uint256,string)\":{\"details\":\"Public function to add metadata to a deed\",\"params\":{\"_tokenId\":\"represents a specific deed\",\"_uri\":\"text which describes the characteristics of a given deed\"},\"returns\":{\"_0\":\"whether the deed metadata was added to the repository\"}},\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token IDThe zero address indicates there is no approved address.There can only be one approved address per token at a given time.Can only be called by the token owner or an approved operator.\",\"params\":{\"_to\":\"address to be approved for the given token ID\",\"_tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"_owner\":\"address to query the balance of\"},\"returns\":{\"_0\":\"uint256 representing the amount owned by the passed address\"}},\"constructor\":{\"details\":\"Created a DeedRepository with a name and symbol\",\"params\":{\"_name\":\"string represents the name of the repository\",\"_symbol\":\"string represents the symbol of the repository\"}},\"exists(uint256)\":{\"details\":\"Returns whether the specified token exists\",\"params\":{\"_tokenId\":\"uint256 ID of the token to query the existance of\"},\"returns\":{\"_0\":\"whether the token exists\"}},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set\",\"params\":{\"_tokenId\":\"uint256 ID of the token to query the approval of\"},\"returns\":{\"_0\":\"address currently approved for a the given token ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"_operator\":\"operator address which you want to query the approval of\",\"_owner\":\"owner address which you want to query the approval of\"},\"returns\":{\"_0\":\"bool whether the given operator is approved by the given owner\"}},\"name()\":{\"details\":\"Gets the token name\",\"returns\":{\"_0\":\"string representing the token name\"}},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"_tokenId\":\"uint256 ID of the token to query the owner of\"},\"returns\":{\"_0\":\"owner address currently marked as the owner of the given token ID\"}},\"registerDeed(uint256,string)\":{\"details\":\"Public function to register a new deedCall the ERC721Token minter\",\"params\":{\"_tokenId\":\"uint256 represents a specific deed\",\"_uri\":\"string containing metadata/uri\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another addressIf the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted.Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"_from\":\"current owner of the token\",\"_to\":\"address to receive the ownership of the given token ID\",\"_tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another addressIf the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted.Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"_from\":\"current owner of the token\",\"_to\":\"address to receive the ownership of the given token ID\",\"_tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operatorAn operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"_approved\":\"representing the status of the approval to be set\",\"_to\":\"operator address to set the approval\"}},\"symbol()\":{\"details\":\"Gets the token symbol\",\"returns\":{\"_0\":\"string representing the token symbol\"}},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contractReverts if the index is greater or equal to the total number of tokens\",\"params\":{\"_index\":\"uint256 representing the index to be accessed of the tokens list\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner\",\"params\":{\"_index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"_owner\":\"address owning the tokens list to be accessed\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"}},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token IDThrows if the token ID does not exist. May return an empty string.\",\"params\":{\"_tokenId\":\"uint256 ID of the token to query\"}},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract\",\"returns\":{\"_0\":\"uint256 representing the total amount of tokens\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another addressUsage of this method is discouraged, use `safeTransferFrom` whenever possibleRequires the msg sender to be the owner, approved, or operator\",\"params\":{\"_from\":\"current owner of the token\",\"_to\":\"address to receive the ownership of the given token ID\",\"_tokenId\":\"uint256 ID of the token to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/Devesh/Desktop/auctionApp/backend/contracts/Deed.sol\":\"Deed\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/Devesh/Desktop/auctionApp/backend/contracts/Deed.sol\":{\"keccak256\":\"0x68522ced40f35cf3bd871562fb52a8566fb8fa77986745c7349dcccbd7f1eb82\",\"urls\":[\"bzz-raw://bb97f8ef7a50d15fddd163b1cd52a1b02c9b9f7cb203d881e1934520196c67bb\",\"dweb:/ipfs/QmYmDX7FaJAVgC7oG8vAC4eKHexfqRLscPbLt3kEFmTeVw\"]},\"/Users/Devesh/Desktop/auctionApp/backend/contracts/ERC721/DeprecatedERC721.sol\":{\"keccak256\":\"0x21a88072b5c783f8d09f72f0b93d0e97890e6607d048f0b0eab3b67f2a9f699a\",\"urls\":[\"bzz-raw://8caf7f6793501465f560e5ce0f05611d097816b573dd82c77aa6431bf75422f4\",\"dweb:/ipfs/QmSqeqroGCKDYrAPjKDBUjJWb1B5a1Mg2QoWVuDdQVRRz2\"]},\"/Users/Devesh/Desktop/auctionApp/backend/contracts/ERC721/ERC721.sol\":{\"keccak256\":\"0x76590e731e4c4d45ba42f2256dea6865f197ed477fd9046dc356481378d2129b\",\"urls\":[\"bzz-raw://7a7eb6ff3a1ab0fa0b9578b216046fee6491598d0be823e932ae5f177601590a\",\"dweb:/ipfs/QmUkEyjmFZKgBhEScwSbjcvDb3yBb8Zr9fDjYQZ326bRew\"]},\"/Users/Devesh/Desktop/auctionApp/backend/contracts/ERC721/ERC721Basic.sol\":{\"keccak256\":\"0x814e7a06276e0cf62c6a8c9239a787046acca437daed214121d3608118e3e775\",\"urls\":[\"bzz-raw://9fb7723b29b083633efb81644a984bfd560d45f00702747caeba10384c19fba8\",\"dweb:/ipfs/QmeLtP1KU4yQt9uL8XPvZppvKi1f751iJPZSfw7sN4ak7y\"]},\"/Users/Devesh/Desktop/auctionApp/backend/contracts/ERC721/ERC721BasicToken.sol\":{\"keccak256\":\"0x9eeb51df8a81ab544aa5847581e627e88bb1ca41315d46580765fb7e76feedf9\",\"urls\":[\"bzz-raw://a0a5f94c439958a0b0533422691fc2c5ab65a88fce2c94308c220e32d449a2ea\",\"dweb:/ipfs/QmQk8iAWgANXSfeCPpT7n8hhF53aRoXsoS7QD8zfGEiAHm\"]},\"/Users/Devesh/Desktop/auctionApp/backend/contracts/ERC721/ERC721Receiver.sol\":{\"keccak256\":\"0xb994d680d6a09ae26ce38973dbcf4ff62a30e2ccba4e0e561d8169d912bbdda2\",\"urls\":[\"bzz-raw://a8596ee2c2c9dfe5a4e95a047f6da8de722761b549040e782ecaa768c4e67d96\",\"dweb:/ipfs/QmejYuifcRiJDQYhEjSGoxqRp78KfZ8p6jqRnF5ZVqYr73\"]},\"/Users/Devesh/Desktop/auctionApp/backend/contracts/ERC721/ERC721Token.sol\":{\"keccak256\":\"0xac7c683418c619ddb94c91a54986a51533655747b6ec73ac620526d59d6df163\",\"urls\":[\"bzz-raw://15641f0676517fda5d53360f71dcbf6e8fe6058ff4118fb736610eda5d29db32\",\"dweb:/ipfs/QmWWrGyXkvRHwikqE1HeDJL7BbqT26QWPMVHAZX2X2YEj2\"]},\"/Users/Devesh/Desktop/auctionApp/backend/contracts/utils/AddressUtils.sol\":{\"keccak256\":\"0xdab0f4423c61d76ea3e7b26b3f03c62512029f9d0582847f20296c422d169197\",\"urls\":[\"bzz-raw://aac8ff325a60f36ca68c6158b22f51076ea7fea71f7f8dd44b6effe07332f290\",\"dweb:/ipfs/QmSNjxmZvHCi8n3CZkhj4jiFMyrPJtQP8CjPvQspX1WbYy\"]},\"/Users/Devesh/Desktop/auctionApp/backend/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x66040fd3c19f55a81b225358904f42d36e160d35a185fc99064cc9282fc2aec5\",\"urls\":[\"bzz-raw://a278fc97a2cde60651d5ae6cc103de09a1dc733a7ef58e7529c9ace0afe36270\",\"dweb:/ipfs/QmTk3sod58cqPYhZuM5oTiDN6vunJkibbvZ5jAiuqG8wqe\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200224038038062002240833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b5060405250505081818160049080519060200190620001cf929190620001f3565b508060059080519060200190620001e8929190620001f3565b5050505050620002a2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023657805160ff191683800117855562000267565b8280016001018555821562000267579182015b828111156200026657825182559160200191906001019062000249565b5b5090506200027691906200027a565b5090565b6200029f91905b808211156200029b57600081600090555060010162000281565b5090565b90565b611f8e80620002b26000396000f3fe608060405234801561001057600080fd5b5060043610610133576000357c0100000000000000000000000000000000000000000000000000000000900480636352211e116100bf578063b88d4fde1161008e578063b88d4fde146105f4578063c87b56dd146106f9578063da556033146107a0578063e985e9c51461087d578063f72439dd146108f957610133565b80636352211e1461045b57806370a08231146104c957806395d89b4114610521578063a22cb465146105a457610133565b806323b872dd1161010657806323b872dd146102955780632f745c591461030357806342842e0e146103655780634f558e79146103d35780634f6ccce71461041957610133565b806306fdde0314610138578063081812fc146101bb578063095ea7b31461022957806318160ddd14610277575b600080fd5b6101406109be565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610180578082015181840152602081019050610165565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101e7600480360360208110156101d157600080fd5b8101908080359060200190929190505050610a60565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102756004803603604081101561023f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a9d565b005b61027f610c5f565b6040518082815260200191505060405180910390f35b610301600480360360608110156102ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c6c565b005b61034f6004803603604081101561031957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d7d565b6040518082815260200191505060405180910390f35b6103d16004803603606081101561037b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610df0565b005b6103ff600480360360208110156103e957600080fd5b8101908080359060200190929190505050610e25565b604051808215151515815260200191505060405180910390f35b6104456004803603602081101561042f57600080fd5b8101908080359060200190929190505050610e96565b6040518082815260200191505060405180910390f35b6104876004803603602081101561047157600080fd5b8101908080359060200190929190505050610eca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61050b600480360360208110156104df57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f45565b6040518082815260200191505060405180910390f35b610529610fc7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056957808201518184015260208101905061054e565b50505050905090810190601f1680156105965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105f2600480360360408110156105ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611069565b005b6106f76004803603608081101561060a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561067157600080fd5b82018360208201111561068357600080fd5b803590602001918460018302840111640100000000831117156106a557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506111a3565b005b6107256004803603602081101561070f57600080fd5b81019080803590602001909291905050506111de565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561076557808201518184015260208101905061074a565b50505050905090810190601f1680156107925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610863600480360360408110156107b657600080fd5b8101908080359060200190929190803590602001906401000000008111156107dd57600080fd5b8201836020820111156107ef57600080fd5b8035906020019184600183028401116401000000008311171561081157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506112a5565b604051808215151515815260200191505060405180910390f35b6108df6004803603604081101561089357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112bb565b604051808215151515815260200191505060405180910390f35b6109bc6004803603604081101561090f57600080fd5b81019080803590602001909291908035906020019064010000000081111561093657600080fd5b82018360208201111561094857600080fd5b8035906020019184600183028401116401000000008311171561096a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061134f565b005b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a565780601f10610a2b57610100808354040283529160200191610a56565b820191906000526020600020905b815481529060010190602001808311610a3957829003601f168201915b5050505050905090565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610aa882610eca565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ae357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b235750610b2281336112bb565b5b610b2c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16610b4d83610a60565b73ffffffffffffffffffffffffffffffffffffffff16141580610b9d5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15610c5a57826001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a35b505050565b6000600880549050905090565b80610c7733826113d3565b610c8057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610cba57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cf457600080fd5b610cfe8483611468565b610d0884836115cd565b610d1283836117e4565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b6000610d8883610f45565b8210610d9357600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610ddd57fe5b9060005260206000200154905092915050565b80610dfb33826113d3565b610e0457600080fd5b610e1f848484604051806020016040528060008152506111a3565b50505050565b60008060008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000610ea0610c5f565b8210610eab57600080fd5b60088281548110610eb857fe5b90600052602060002001549050919050565b60008060008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f3c57600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f8057600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561105f5780601f106110345761010080835404028352916020019161105f565b820191906000526020600020905b81548152906001019060200180831161104257829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110a257600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b816111ae33826113d3565b6111b757600080fd5b6111c2858585610c6c565b6111ce858585856118b8565b6111d757600080fd5b5050505050565b60606111e982610e25565b6111f257600080fd5b600a60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112995780601f1061126e57610100808354040283529160200191611299565b820191906000526020600020905b81548152906001019060200180831161127c57829003601f168201915b50505050509050919050565b60006112b18383611aa5565b6001905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6113593383611ae3565b61136382826112a5565b507f32cc5b866d6a5990a7f987020b639157969cb963b9beb2cdf41df22ab152df353383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000806113df83610eca565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061144e57508373ffffffffffffffffffffffffffffffffffffffff1661143684610a60565b73ffffffffffffffffffffffffffffffffffffffff16145b8061145f575061145e81856112bb565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff1661148882610eca565b73ffffffffffffffffffffffffffffffffffffffff16146114a857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115c95760006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b6115d78282611b37565b60006007600083815260200190815260200160002054905060006116476001600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611c6390919063ffffffff16565b90506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061169557fe5b9060005260206000200154905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106116ed57fe5b90600052602060002001819055506000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811061174757fe5b90600052602060002001819055506117ab6001600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611c6390919063ffffffff16565b50600060076000868152602001908152602001600020819055508260076000838152602001908152602001600020819055505050505050565b6117ee8282611c7a565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055806007600084815260200190815260200160002081905550505050565b60006118d98473ffffffffffffffffffffffffffffffffffffffff16611dd0565b6118e65760019050611a9d565b60008473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156119aa57808201518184015260208101905061198f565b50505050905090810190601f1680156119d75780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156119f857600080fd5b505af1158015611a0c573d6000803e3d6000fd5b505050506040513d6020811015611a2257600080fd5b8101908080519060200190929190505050905063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b611aae82610e25565b611ab757600080fd5b80600a60008481526020019081526020016000209080519060200190611ade929190611eb3565b505050565b611aed8282611de9565b600880549050600960008381526020019081526020016000208190555060088190806001815401808255809150506001900390600052602060002001600090919091909150555050565b8173ffffffffffffffffffffffffffffffffffffffff16611b5782610eca565b73ffffffffffffffffffffffffffffffffffffffff1614611b7757600080fd5b611bca6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c6390919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600080600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082821115611c6f57fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ce557600080fd5b8160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611d896001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9790919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080823b905060008163ffffffff1611915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e2357600080fd5b611e2d82826117e4565b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080828401905083811015611ea957fe5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ef457805160ff1916838001178555611f22565b82800160010185558215611f22579182015b82811115611f21578251825591602001919060010190611f06565b5b509050611f2f9190611f33565b5090565b611f5591905b80821115611f51576000816000905550600101611f39565b5090565b9056fea26469706673582212204a36013b9ec2d610f39e0f2720235d5cf079b24e695dcadf79547f5a3867f2ea64736f6c63430006040033",
  "deployedBytecode": "",
  "sourceMap": "61:1460:1:-:0;;;306:113;5:9:-1;2:2;;;27:1;24;17:12;2:2;306:113:1;;;;;;;;;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;306:113:1;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;384:12;379:3;372:25;420:4;415:3;411:14;404:21;;0:432;;306:113:1;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;306:113:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;384:12;379:3;372:25;420:4;415:3;411:14;404:21;;0:432;;306:113:1;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;306:113:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;397:5;404:7;1163:5:8;1155;:13;;;;;;;;;;;;:::i;:::-;;1182:7;1172;:17;;;;;;;;;;;;:::i;:::-;;1088:105;;306:113:1;;61:1460;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "61:1460:1:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;61:1460:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;1282:81:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1282:81:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3841:126:5;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;3841:126:5;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3202:398;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;3202:398:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2544:93:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5458:379:5;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;5458:379:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2226:181:8;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;2226:181:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6478:197:5;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;6478:197:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2605:159;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;2605:159:5;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2959:144:8;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;2959:144:8;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2228:187:5;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;2228:187:5;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1842:161;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;1842:161:5;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1456:85:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1456:85:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4266:229:5;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;4266:229:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7388:291;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;7388:291:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:11:-1;14;11:28;8:2;;;52:1;49;42:12;8:2;7388:291:5;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;7388:291:5;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7388:291:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7388:291:5;;;;;;;;;;;;;;;:::i;:::-;;1728:144:8;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;1728:144:8;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1728:144:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1114:171:1;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;1114:171:1;;;;;;;;;;;;;;;;;;;27:11:-1;14;11:28;8:2;;;52:1;49;42:12;8:2;1114:171:1;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;1114:171:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1114:171:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1114:171:1;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4818:193:5;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;4818:193:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;640:203:1;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;640:203:1;;;;;;;;;;;;;;;;;;;27:11:-1;14;11:28;8:2;;;52:1;49;42:12;8:2;640:203:1;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;640:203:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;640:203:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;640:203:1;;;;;;;;;;;;;;;:::i;:::-;;1282:81:8;1328:13;1354:5;1347:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1282:81;:::o;3841:126:5:-;3910:7;3936:14;:24;3951:8;3936:24;;;;;;;;;;;;;;;;;;;;;3929:31;;3841:126;;;:::o;3202:398::-;3276:13;3292:17;3300:8;3292:7;:17::i;:::-;3276:33;;3334:5;3327:12;;:3;:12;;;;3319:21;;12:1:-1;9;2:12;3319:21:5;3372:5;3358:19;;:10;:19;;;:58;;;;3381:35;3398:5;3405:10;3381:16;:35::i;:::-;3358:58;3350:67;;12:1:-1;9;2:12;3350:67:5;3465:1;3432:35;;:21;3444:8;3432:11;:21::i;:::-;:35;;;;:56;;;;3486:1;3471:17;;:3;:17;;;;3432:56;3428:166;;;3531:3;3504:14;:24;3519:8;3504:24;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;3569:3;3553:30;;3562:5;3553:30;;;3574:8;3553:30;;;;;;;;;;;;;;;;;;3428:166;3202:398;;;:::o;2544:93:8:-;2597:7;2617:9;:16;;;;2610:23;;2544:93;:::o;5458:379:5:-;5578:8;1580:39;1598:10;1610:8;1580:17;:39::i;:::-;1572:48;;12:1:-1;9;2:12;1572:48:5;5627:1:::1;5610:19;;:5;:19;;;;5602:28;;12:1:-1;9::::0;2:12:::1;5602:28:5;5663:1;5648:17;;:3;:17;;;;5640:26;;12:1:-1;9::::0;2:12:::1;5640:26:5;5677:30;5691:5;5698:8;5677:13;:30::i;:::-;5717:32;5733:5;5740:8;5717:15;:32::i;:::-;5759:25;5770:3;5775:8;5759:10;:25::i;:::-;5816:3;5800:30;;5809:5;5800:30;;;5821:8;5800:30;;;;;;;;;;;;;;;;;;5458:379:::0;;;;:::o;2226:181:8:-;2317:7;2347:17;2357:6;2347:9;:17::i;:::-;2338:6;:26;2330:35;;12:1:-1;9;2:12;2330:35:8;2376:11;:19;2388:6;2376:19;;;;;;;;;;;;;;;2396:6;2376:27;;;;;;;;;;;;;;;;2369:34;;2226:181;;;;:::o;6478:197:5:-;6602:8;1580:39;1598:10;1610:8;1580:17;:39::i;:::-;1572:48;;12:1:-1;9;2:12;1572:48:5;6626:42:::1;6643:5;6650:3;6655:8;6626:42;;;;;;;;;;;::::0;:16:::1;:42::i;:::-;6478:197:::0;;;;:::o;2605:159::-;2669:4;2685:13;2701:10;:20;2712:8;2701:20;;;;;;;;;;;;;;;;;;;;;2685:36;;2755:1;2738:19;;:5;:19;;;;2731:26;;;2605:159;;;:::o;2959:144:8:-;3027:7;3057:13;:11;:13::i;:::-;3048:6;:22;3040:31;;12:1:-1;9;2:12;3040:31:8;3082:9;3092:6;3082:17;;;;;;;;;;;;;;;;3075:24;;2959:144;;;:::o;2228:187:5:-;2293:7;2312:13;2328:10;:20;2339:8;2328:20;;;;;;;;;;;;;;;;;;;;;2312:36;;2383:1;2366:19;;:5;:19;;;;2358:28;;12:1:-1;9;2:12;2358:28:5;2403:5;2396:12;;;2228:187;;;:::o;1842:161::-;1907:7;1952:1;1934:20;;:6;:20;;;;1926:29;;12:1:-1;9;2:12;1926:29:5;1972:16;:24;1989:6;1972:24;;;;;;;;;;;;;;;;1965:31;;1842:161;;;:::o;1456:85:8:-;1504:13;1530:7;1523:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1456:85;:::o;4266:229:5:-;4364:10;4357:17;;:3;:17;;;;4349:26;;12:1:-1;9;2:12;4349:26:5;4422:9;4385:17;:29;4403:10;4385:29;;;;;;;;;;;;;;;:34;4415:3;4385:34;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;4473:3;4446:42;;4461:10;4446:42;;;4478:9;4446:42;;;;;;;;;;;;;;;;;;;;;;4266:229;;:::o;7388:291::-;7546:8;1580:39;1598:10;1610:8;1580:17;:39::i;:::-;1572:48;;12:1:-1;9;2:12;1572:48:5;7566:34:::1;7579:5;7586:3;7591:8;7566:12;:34::i;:::-;7618:53;7643:5;7650:3;7655:8;7665:5;7618:24;:53::i;:::-;7610:62;;12:1:-1;9::::0;2:12:::1;7610:62:5;7388:291:::0;;;;;:::o;1728:144:8:-;1794:13;1821:16;1828:8;1821:6;:16::i;:::-;1813:25;;12:1:-1;9;2:12;1813:25:8;1849:9;:19;1859:8;1849:19;;;;;;;;;;;1842:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1728:144;;;:::o;1114:171:1:-;1209:4;1229:28;1242:8;1252:4;1229:12;:28::i;:::-;1274:4;1267:11;;1114:171;;;;:::o;4818:193:5:-;4941:4;4968:17;:25;4986:6;4968:25;;;;;;;;;;;;;;;:36;4994:9;4968:36;;;;;;;;;;;;;;;;;;;;;;;;;4961:43;;4818:193;;;;:::o;640:203:1:-;717:27;723:10;735:8;717:5;:27::i;:::-;754:31;770:8;780:4;754:15;:31::i;:::-;;800:36;815:10;827:8;800:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;640:203;;:::o;8042:314:5:-;8152:4;8172:13;8188:17;8196:8;8188:7;:17::i;:::-;8172:33;;8246:5;8234:17;;:8;:17;;;:66;;;;8292:8;8267:33;;:21;8279:8;8267:11;:21::i;:::-;:33;;;8234:66;:115;;;;8316:33;8333:5;8340:8;8316:16;:33::i;:::-;8234:115;8215:134;;;8042:314;;;;:::o;9504:291::-;9609:6;9588:27;;:17;9596:8;9588:7;:17::i;:::-;:27;;;9580:36;;12:1:-1;9;2:12;9580:36:5;9666:1;9630:38;;:14;:24;9645:8;9630:24;;;;;;;;;;;;;;;;;;;;;:38;;;9626:163;;9719:1;9684:14;:24;9699:8;9684:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;9765:1;9740:38;;9749:6;9740:38;;;9769:8;9740:38;;;;;;;;;;;;;;;;;;9626:163;9504:291;;:::o;4214:845:8:-;4294:38;4316:5;4323:8;4294:21;:38::i;:::-;4337:18;4358:16;:26;4375:8;4358:26;;;;;;;;;;;;4337:47;;4388:22;4413:32;4443:1;4413:11;:18;4425:5;4413:18;;;;;;;;;;;;;;;:25;;;;:29;;:32;;;;:::i;:::-;4388:57;;4449:17;4469:11;:18;4481:5;4469:18;;;;;;;;;;;;;;;4488:14;4469:34;;;;;;;;;;;;;;;;4449:54;;4541:9;4508:11;:18;4520:5;4508:18;;;;;;;;;;;;;;;4527:10;4508:30;;;;;;;;;;;;;;;:42;;;;4591:1;4554:11;:18;4566:5;4554:18;;;;;;;;;;;;;;;4573:14;4554:34;;;;;;;;;;;;;;;:38;;;;4945:32;4975:1;4945:11;:18;4957:5;4945:18;;;;;;;;;;;;;;;:25;;;;:29;;:32;;;;:::i;:::-;;5010:1;4981:16;:26;4998:8;4981:26;;;;;;;;;;;:30;;;;5045:10;5015:16;:27;5032:9;5015:27;;;;;;;;;;;:40;;;;4214:845;;;;;:::o;3715:226::-;3788:31;3805:3;3810:8;3788:16;:31::i;:::-;3823:14;3840:11;:16;3852:3;3840:16;;;;;;;;;;;;;;;:23;;;;3823:40;;3867:11;:16;3879:3;3867:16;;;;;;;;;;;;;;;3889:8;3867:31;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;3867:31:8;;;;;;;;;;;;;;;;;;;3931:6;3902:16;:26;3919:8;3902:26;;;;;;;;;;;:35;;;;3715:226;;;:::o;11354:413:5:-;11510:4;11531:16;:3;:14;;;:16::i;:::-;11526:59;;11570:4;11563:11;;;;11526:59;11594:13;11625:3;11610:36;;;11660:5;11679:8;11701:5;11610:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11610:106:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;11610:106:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11610:106:5;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;11610:106:5;;;;;;;;;;;;;;;;11594:122;;619:10;11744:15;;11734:25;;;:6;:25;;;;11726:34;;;11354:413;;;;;;;:::o;3326:132:8:-;3407:16;3414:8;3407:6;:16::i;:::-;3399:25;;12:1:-1;9;2:12;3399:25:8;3450:4;3428:9;:19;3438:8;3428:19;;;;;;;;;;;:26;;;;;;;;;;;;:::i;:::-;;3326:132;;:::o;5318:174::-;5386:26;5398:3;5403:8;5386:11;:26::i;:::-;5444:9;:16;;;;5417:14;:24;5432:8;5417:24;;;;;;;;;;;:43;;;;5464:9;5479:8;5464:24;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;5464:24:8;;;;;;;;;;;;;;;;;;;5318:174;;:::o;10587:236:5:-;10701:5;10680:26;;:17;10688:8;10680:7;:17::i;:::-;:26;;;10672:35;;12:1:-1;9;2:12;10672:35:5;10743:30;10771:1;10743:16;:23;10760:5;10743:23;;;;;;;;;;;;;;;;:27;;:30;;;;:::i;:::-;10717:16;:23;10734:5;10717:23;;;;;;;;;;;;;;;:56;;;;10814:1;10783:10;:20;10794:8;10783:20;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;10587:236;;:::o;916:120:12:-;974:7;1005:1;1000;:6;;993:14;;;;1028:1;1024;:5;1017:12;;916:120;;;;:::o;10070:226:5:-;10188:1;10156:34;;:10;:20;10167:8;10156:20;;;;;;;;;;;;;;;;;;;;;:34;;;10148:43;;12:1:-1;9;2:12;10148:43:5;10224:3;10201:10;:20;10212:8;10201:20;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;10261:28;10287:1;10261:16;:21;10278:3;10261:21;;;;;;;;;;;;;;;;:25;;:28;;;;:::i;:::-;10237:16;:21;10254:3;10237:21;;;;;;;;;;;;;;;:52;;;;10070:226;;:::o;113:187:10:-;171:4;187:11;251:5;239:18;231:26;;291:1;284:4;:8;;;276:17;;;113:187;;;:::o;8624:186:5:-;8720:1;8705:17;;:3;:17;;;;8697:26;;12:1:-1;9;2:12;8697:26:5;8733:25;8744:3;8749:8;8733:10;:25::i;:::-;8789:3;8768:35;;8785:1;8768:35;;;8794:8;8768:35;;;;;;;;;;;;;;;;;;8624:186;;:::o;1108:143:12:-;1166:7;1185:9;1201:1;1197;:5;1185:17;;1224:1;1219;:6;;1212:14;;;;1243:1;1236:8;;;1108:143;;;;:::o;61:1460:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.6.4;\nimport \"./ERC721/ERC721Token.sol\";\n\n\ncontract Deed is ERC721Token {\n    /**\n     * @dev Created a DeedRepository with a name and symbol\n     * @param _name string represents the name of the repository\n     * @param _symbol string represents the symbol of the repository\n     */\n    constructor(string memory _name, string memory _symbol)\n        public\n        ERC721Token(_name, _symbol)\n    {}\n\n    /**\n     * @dev Public function to register a new deed\n     * @dev Call the ERC721Token minter\n     * @param _tokenId uint256 represents a specific deed\n     * @param _uri string containing metadata/uri\n     */\n    function registerDeed(uint256 _tokenId, string memory _uri) public {\n        _mint(msg.sender, _tokenId);\n        addDeedMetadata(_tokenId, _uri);\n        emit DeedRegistered(msg.sender, _tokenId);\n    }\n\n    /**\n     * @dev Public function to add metadata to a deed\n     * @param _tokenId represents a specific deed\n     * @param _uri text which describes the characteristics of a given deed\n     * @return whether the deed metadata was added to the repository\n     */\n    function addDeedMetadata(uint256 _tokenId, string memory _uri)\n        public\n        returns (bool)\n    {\n        _setTokenURI(_tokenId, _uri);\n        return true;\n    }\n\n    /**\n     * @dev Event is triggered if deed/token is registered\n     * @param _by address of the registrar\n     * @param _tokenId uint256 represents a specific deed\n     */\n    event DeedRegistered(address _by, uint256 _tokenId);\n}\n",
  "sourcePath": "/Users/Devesh/Desktop/auctionApp/backend/contracts/Deed.sol",
  "ast": {
    "absolutePath": "/Users/Devesh/Desktop/auctionApp/backend/contracts/Deed.sol",
    "exportedSymbols": {
      "Deed": [
        781
      ]
    },
    "id": 782,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 713,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:1"
      },
      {
        "absolutePath": "/Users/Devesh/Desktop/auctionApp/backend/contracts/ERC721/ERC721Token.sol",
        "file": "./ERC721/ERC721Token.sol",
        "id": 714,
        "nodeType": "ImportDirective",
        "scope": 782,
        "sourceUnit": 2042,
        "src": "24:34:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 715,
              "name": "ERC721Token",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2041,
              "src": "78:11:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Token_$2041",
                "typeString": "contract ERC721Token"
              }
            },
            "id": 716,
            "nodeType": "InheritanceSpecifier",
            "src": "78:11:1"
          }
        ],
        "contractDependencies": [
          836,
          857,
          865,
          973,
          1601,
          2041
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 781,
        "linearizedBaseContracts": [
          781,
          2041,
          1601,
          865,
          857,
          836,
          973
        ],
        "name": "Deed",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 728,
              "nodeType": "Block",
              "src": "417:2:1",
              "statements": []
            },
            "documentation": {
              "id": 717,
              "nodeType": "StructuredDocumentation",
              "src": "96:205:1",
              "text": "@dev Created a DeedRepository with a name and symbol\n@param _name string represents the name of the repository\n@param _symbol string represents the symbol of the repository"
            },
            "id": 729,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 724,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 719,
                    "src": "397:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 725,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 721,
                    "src": "404:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 726,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 723,
                  "name": "ERC721Token",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2041,
                  "src": "385:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Token_$2041_$",
                    "typeString": "type(contract ERC721Token)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "385:27:1"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 722,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 719,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 729,
                  "src": "318:19:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 718,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "318:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 721,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 729,
                  "src": "339:21:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 720,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "339:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "317:44:1"
            },
            "returnParameters": {
              "id": 727,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "417:0:1"
            },
            "scope": 781,
            "src": "306:113:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 754,
              "nodeType": "Block",
              "src": "707:136:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 738,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "723:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 739,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "723:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 740,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 732,
                        "src": "735:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 737,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1955
                      ],
                      "referencedDeclaration": 1955,
                      "src": "717:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 741,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "717:27:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 742,
                  "nodeType": "ExpressionStatement",
                  "src": "717:27:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 744,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 732,
                        "src": "770:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 745,
                        "name": "_uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 734,
                        "src": "780:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 743,
                      "name": "addDeedMetadata",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 773,
                      "src": "754:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$_t_bool_$",
                        "typeString": "function (uint256,string memory) returns (bool)"
                      }
                    },
                    "id": 746,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "754:31:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 747,
                  "nodeType": "ExpressionStatement",
                  "src": "754:31:1"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 749,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "815:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 750,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "815:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 751,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 732,
                        "src": "827:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 748,
                      "name": "DeedRegistered",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 780,
                      "src": "800:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 752,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "800:36:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 753,
                  "nodeType": "EmitStatement",
                  "src": "795:41:1"
                }
              ]
            },
            "documentation": {
              "id": 730,
              "nodeType": "StructuredDocumentation",
              "src": "425:210:1",
              "text": "@dev Public function to register a new deed\n@dev Call the ERC721Token minter\n@param _tokenId uint256 represents a specific deed\n@param _uri string containing metadata/uri"
            },
            "functionSelector": "f72439dd",
            "id": 755,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "registerDeed",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 735,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 732,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 755,
                  "src": "662:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 731,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "662:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 734,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 755,
                  "src": "680:18:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 733,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "680:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "661:38:1"
            },
            "returnParameters": {
              "id": 736,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "707:0:1"
            },
            "scope": 781,
            "src": "640:203:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 772,
              "nodeType": "Block",
              "src": "1219:66:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 766,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 758,
                        "src": "1242:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 767,
                        "name": "_uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 760,
                        "src": "1252:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 765,
                      "name": "_setTokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1811,
                      "src": "1229:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 768,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1229:28:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 769,
                  "nodeType": "ExpressionStatement",
                  "src": "1229:28:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 770,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1274:4:1",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 764,
                  "id": 771,
                  "nodeType": "Return",
                  "src": "1267:11:1"
                }
              ]
            },
            "documentation": {
              "id": 756,
              "nodeType": "StructuredDocumentation",
              "src": "849:260:1",
              "text": "@dev Public function to add metadata to a deed\n@param _tokenId represents a specific deed\n@param _uri text which describes the characteristics of a given deed\n@return whether the deed metadata was added to the repository"
            },
            "functionSelector": "da556033",
            "id": 773,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addDeedMetadata",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 761,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 758,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 773,
                  "src": "1139:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 757,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1139:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 760,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 773,
                  "src": "1157:18:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 759,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1157:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1138:38:1"
            },
            "returnParameters": {
              "id": 764,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 763,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 773,
                  "src": "1209:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 762,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1209:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1208:6:1"
            },
            "scope": 781,
            "src": "1114:171:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 774,
              "nodeType": "StructuredDocumentation",
              "src": "1291:171:1",
              "text": "@dev Event is triggered if deed/token is registered\n@param _by address of the registrar\n@param _tokenId uint256 represents a specific deed"
            },
            "id": 780,
            "name": "DeedRegistered",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 779,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 776,
                  "indexed": false,
                  "name": "_by",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 780,
                  "src": "1488:11:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 775,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1488:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 778,
                  "indexed": false,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 780,
                  "src": "1501:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 777,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1501:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1487:31:1"
            },
            "src": "1467:52:1"
          }
        ],
        "scope": 782,
        "src": "61:1460:1"
      }
    ],
    "src": "0:1522:1"
  },
  "legacyAST": {
    "absolutePath": "/Users/Devesh/Desktop/auctionApp/backend/contracts/Deed.sol",
    "exportedSymbols": {
      "Deed": [
        781
      ]
    },
    "id": 782,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 713,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:1"
      },
      {
        "absolutePath": "/Users/Devesh/Desktop/auctionApp/backend/contracts/ERC721/ERC721Token.sol",
        "file": "./ERC721/ERC721Token.sol",
        "id": 714,
        "nodeType": "ImportDirective",
        "scope": 782,
        "sourceUnit": 2042,
        "src": "24:34:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 715,
              "name": "ERC721Token",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2041,
              "src": "78:11:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Token_$2041",
                "typeString": "contract ERC721Token"
              }
            },
            "id": 716,
            "nodeType": "InheritanceSpecifier",
            "src": "78:11:1"
          }
        ],
        "contractDependencies": [
          836,
          857,
          865,
          973,
          1601,
          2041
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 781,
        "linearizedBaseContracts": [
          781,
          2041,
          1601,
          865,
          857,
          836,
          973
        ],
        "name": "Deed",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 728,
              "nodeType": "Block",
              "src": "417:2:1",
              "statements": []
            },
            "documentation": {
              "id": 717,
              "nodeType": "StructuredDocumentation",
              "src": "96:205:1",
              "text": "@dev Created a DeedRepository with a name and symbol\n@param _name string represents the name of the repository\n@param _symbol string represents the symbol of the repository"
            },
            "id": 729,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 724,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 719,
                    "src": "397:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 725,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 721,
                    "src": "404:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 726,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 723,
                  "name": "ERC721Token",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2041,
                  "src": "385:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Token_$2041_$",
                    "typeString": "type(contract ERC721Token)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "385:27:1"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 722,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 719,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 729,
                  "src": "318:19:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 718,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "318:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 721,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 729,
                  "src": "339:21:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 720,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "339:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "317:44:1"
            },
            "returnParameters": {
              "id": 727,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "417:0:1"
            },
            "scope": 781,
            "src": "306:113:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 754,
              "nodeType": "Block",
              "src": "707:136:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 738,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "723:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 739,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "723:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 740,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 732,
                        "src": "735:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 737,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1955
                      ],
                      "referencedDeclaration": 1955,
                      "src": "717:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 741,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "717:27:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 742,
                  "nodeType": "ExpressionStatement",
                  "src": "717:27:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 744,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 732,
                        "src": "770:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 745,
                        "name": "_uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 734,
                        "src": "780:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 743,
                      "name": "addDeedMetadata",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 773,
                      "src": "754:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$_t_bool_$",
                        "typeString": "function (uint256,string memory) returns (bool)"
                      }
                    },
                    "id": 746,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "754:31:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 747,
                  "nodeType": "ExpressionStatement",
                  "src": "754:31:1"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 749,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "815:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 750,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "815:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 751,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 732,
                        "src": "827:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 748,
                      "name": "DeedRegistered",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 780,
                      "src": "800:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 752,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "800:36:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 753,
                  "nodeType": "EmitStatement",
                  "src": "795:41:1"
                }
              ]
            },
            "documentation": {
              "id": 730,
              "nodeType": "StructuredDocumentation",
              "src": "425:210:1",
              "text": "@dev Public function to register a new deed\n@dev Call the ERC721Token minter\n@param _tokenId uint256 represents a specific deed\n@param _uri string containing metadata/uri"
            },
            "functionSelector": "f72439dd",
            "id": 755,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "registerDeed",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 735,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 732,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 755,
                  "src": "662:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 731,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "662:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 734,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 755,
                  "src": "680:18:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 733,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "680:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "661:38:1"
            },
            "returnParameters": {
              "id": 736,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "707:0:1"
            },
            "scope": 781,
            "src": "640:203:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 772,
              "nodeType": "Block",
              "src": "1219:66:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 766,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 758,
                        "src": "1242:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 767,
                        "name": "_uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 760,
                        "src": "1252:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 765,
                      "name": "_setTokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1811,
                      "src": "1229:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 768,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1229:28:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 769,
                  "nodeType": "ExpressionStatement",
                  "src": "1229:28:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 770,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1274:4:1",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 764,
                  "id": 771,
                  "nodeType": "Return",
                  "src": "1267:11:1"
                }
              ]
            },
            "documentation": {
              "id": 756,
              "nodeType": "StructuredDocumentation",
              "src": "849:260:1",
              "text": "@dev Public function to add metadata to a deed\n@param _tokenId represents a specific deed\n@param _uri text which describes the characteristics of a given deed\n@return whether the deed metadata was added to the repository"
            },
            "functionSelector": "da556033",
            "id": 773,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addDeedMetadata",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 761,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 758,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 773,
                  "src": "1139:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 757,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1139:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 760,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 773,
                  "src": "1157:18:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 759,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1157:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1138:38:1"
            },
            "returnParameters": {
              "id": 764,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 763,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 773,
                  "src": "1209:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 762,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1209:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1208:6:1"
            },
            "scope": 781,
            "src": "1114:171:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 774,
              "nodeType": "StructuredDocumentation",
              "src": "1291:171:1",
              "text": "@dev Event is triggered if deed/token is registered\n@param _by address of the registrar\n@param _tokenId uint256 represents a specific deed"
            },
            "id": 780,
            "name": "DeedRegistered",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 779,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 776,
                  "indexed": false,
                  "name": "_by",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 780,
                  "src": "1488:11:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 775,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1488:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 778,
                  "indexed": false,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 780,
                  "src": "1501:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 777,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1501:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1487:31:1"
            },
            "src": "1467:52:1"
          }
        ],
        "scope": 782,
        "src": "61:1460:1"
      }
    ],
    "src": "0:1522:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.4+commit.1dca32f3.Emscripten.clang"
  },
  "networks": {
    "3": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "_approved",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "_operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        "0x32cc5b866d6a5990a7f987020b639157969cb963b9beb2cdf41df22ab152df35": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_by",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "name": "DeedRegistered",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x3590c711307922476Bf3451E59533B69057eE6fB",
      "transactionHash": "0xc2f421a316c75b2ab4391ff3acdf6983f1a2d164707bc018f5e32268772f9d98"
    }
  },
  "schemaVersion": "3.1.0",
  "updatedAt": "2020-05-04T13:53:02.538Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "addDeedMetadata(uint256,string)": {
        "details": "Public function to add metadata to a deed",
        "params": {
          "_tokenId": "represents a specific deed",
          "_uri": "text which describes the characteristics of a given deed"
        },
        "returns": {
          "_0": "whether the deed metadata was added to the repository"
        }
      },
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token IDThe zero address indicates there is no approved address.There can only be one approved address per token at a given time.Can only be called by the token owner or an approved operator.",
        "params": {
          "_to": "address to be approved for the given token ID",
          "_tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "_owner": "address to query the balance of"
        },
        "returns": {
          "_0": "uint256 representing the amount owned by the passed address"
        }
      },
      "constructor": {
        "details": "Created a DeedRepository with a name and symbol",
        "params": {
          "_name": "string represents the name of the repository",
          "_symbol": "string represents the symbol of the repository"
        }
      },
      "exists(uint256)": {
        "details": "Returns whether the specified token exists",
        "params": {
          "_tokenId": "uint256 ID of the token to query the existance of"
        },
        "returns": {
          "_0": "whether the token exists"
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set",
        "params": {
          "_tokenId": "uint256 ID of the token to query the approval of"
        },
        "returns": {
          "_0": "address currently approved for a the given token ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "_operator": "operator address which you want to query the approval of",
          "_owner": "owner address which you want to query the approval of"
        },
        "returns": {
          "_0": "bool whether the given operator is approved by the given owner"
        }
      },
      "name()": {
        "details": "Gets the token name",
        "returns": {
          "_0": "string representing the token name"
        }
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "_tokenId": "uint256 ID of the token to query the owner of"
        },
        "returns": {
          "_0": "owner address currently marked as the owner of the given token ID"
        }
      },
      "registerDeed(uint256,string)": {
        "details": "Public function to register a new deedCall the ERC721Token minter",
        "params": {
          "_tokenId": "uint256 represents a specific deed",
          "_uri": "string containing metadata/uri"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another addressIf the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise, the transfer is reverted.Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the given token ID",
          "_tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another addressIf the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise, the transfer is reverted.Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the given token ID",
          "_tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operatorAn operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "_approved": "representing the status of the approval to be set",
          "_to": "operator address to set the approval"
        }
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "returns": {
          "_0": "string representing the token symbol"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contractReverts if the index is greater or equal to the total number of tokens",
        "params": {
          "_index": "uint256 representing the index to be accessed of the tokens list"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner",
        "params": {
          "_index": "uint256 representing the index to be accessed of the requested tokens list",
          "_owner": "address owning the tokens list to be accessed"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list owned by the requested address"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token IDThrows if the token ID does not exist. May return an empty string.",
        "params": {
          "_tokenId": "uint256 ID of the token to query"
        }
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract",
        "returns": {
          "_0": "uint256 representing the total amount of tokens"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another addressUsage of this method is discouraged, use `safeTransferFrom` whenever possibleRequires the msg sender to be the owner, approved, or operator",
        "params": {
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the given token ID",
          "_tokenId": "uint256 ID of the token to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}